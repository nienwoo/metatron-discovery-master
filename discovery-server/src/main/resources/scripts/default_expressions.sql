INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (4, 'PAGE-CALCULATION', 'ETC', 'ETC FIELD', 'ETC FUNCTION', 'SIZE', 1, 'Y', 'collection의 크기를 반환합니다.<br/><br/>SIZE( collection )<br/>▪ collection: 은(는) 대상이 되는 array 입니다.<br/><br/><br/>SIZE( ARRAY( ''1'', ''2'', ''3'', ''4'' ) ) => 4<br/>SIZE( ARRAY.LONG() )  => 0<br/>SIZE( ARRAY.DOUBLE( 1, 2, 3, 4, 5 ) => 5', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (5, 'PAGE-CALCULATION', 'TYPE_CONVERT', 'TYPE_CONVERT FIELD', 'TYPE_CONVERT FUNCTION', 'ARRAY', 1, 'Y', '주어진 값들을 array(collection)의 형태로 반환합니다.<br/><br/>ARRAY(value1,value2,...)<br/>ARRAY.DOUBLE(value1,value2,...)<br/>ARRAY.LONG(value1,value2,...)<br/>▪ value1: value1,value2,... 은(는) 대상이 되는 값들입니다.<br/><br/>ARRAY( ''1'', ''2'', ''3'', ''4'' )  => [ 1.0, 2.0, 3.0, 4.0 ]<br/>ARRAY.LONG()   => [ ]<br/>ARRAY.DOUBLE( 1, 2, 3, 4, 5 ) => [ 1, 2, 3, 4, 5 ]', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (6, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'LIKE', 1, 'Y', 'search_text으로 match를 확인하여 boolean 으로 반환한다. <br/><br/>LIKE( text , search_text )<br/>▪ text: 은(는) 대상이 되는 텍스트 문자열입니다.<br/>▪ search_text: 은(는) 찾고자하는 문자열입니다.<br/><br/><br/>LIKE(''Funiture'' , ''F%'' )  => True<br/>LIKE(''Technology'' , ''%gy'' )  => True<br/>LIKE(''Technology'' , ''%nol%'' )  => True', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (7, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'REGEX', 1, 'Y', 'regex_text으로 match를 확인하여 matching된 문자열을 반환한다. 그룹화한 경우 index를 통해 원하는 위치의 문자열을 반환할 수 있다.<br/><br/>REGEX( text , regex_text )<br/>REGEX( text , regex_text, index )<br/>▪ text: 은(는) 대상이 되는 텍스트 문자열입니다.<br/>▪ regex_text: 은(는) 찾고자하는 정규 표현식 문자열입니다.<br/>▪ index: 은(는) regex_text를 통해 그룹화한 경우 반환할 그룹위치입니다. 0이면 전체를 반환합니다.<br/><br/>REGEX(''Funiture'' , ''F.*'' ) => ''Funiture''<br/>REGEX(''Funiture'' , ''tu.*'' ) => ''ture''<br/>REGEX(''Technology'' , ''F.*'' ) => ''null''<br/>REGEX( ''ABC3000EFG'' , ''(.*?)(\\d+)(.*)'', 3 ) => ''EFG''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (11, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'ABS', 1, 'Y', '기호가 없는 수의 절대 값을 반환합니다.<br/><br/>ABS(number)<br/>▪ number: 은(는) 절대 값을 구하려는 실수입니다.<br/><br/>ABS(-10) => 10<br/>ABS(10) => 10', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (12, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'ACOS', 1, 'Y', '아크코사인 값을 구합니다.<br/><br/>ACOS(number)<br/>▪ number: 은(는) 구하려는 각도의 코사인 값으로 -1에서 1 사이 값이어야 합니다.<br/><br/>ACOS(-1) => 3.141592653589793', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (13, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'ASIN', 1, 'Y', '아크사인 값을 구합니다.<br/><br/>ASIN(number)<br/>▪ number: 은(는) 구하려는 각도의 사인 값으로 -1에서 1 사이 값이어야 합니다.<br/><br/>ASIN(-1) => -1.5707963267948966', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (14, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'ATAN', 1, 'Y', '아크탄젠트 값을 구합니다.<br/><br/>ATAN(number)<br/>▪ number: 은(는) 구하려는 각도의 탄젠트 값입니다.<br/><br/>ATAN(-1) => -0.7853981633974483', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (15, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'CBRT', 1, 'Y', '밑수를  세제곱한 결과를 구합니다.<br/><br/>CBRT(number)<br/>▪ number: 은(는) 밑수입니다.<br/><br/>CBRT(5) => 1.709975946676697', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (16, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'CEIL', 1, 'Y', '1의 배수가 되도록 절대 값을 올림합니다.<br/><br/>CEIL(number)<br/>▪ number: 은(는) 올림하려는 수입니다.<br/><br/>CEIL(1.234) => 2<br/>CEIL(123.4) => 124<br/>CEIL(1.00) => 1<br/>CEIL(-1.234) => -1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (17, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'COS', 1, 'Y', '각도의 코사인 값을 반환합니다.<br/><br/>COS(number)<br/>▪ number: 은(는) 코사인 값을 구하려는 라디안의 각도입니다.<br/><br/>COS(45) => 0.5253219888177297<br/>COS(10) => -0.8390715290764524<br/>COS(-45) => 0.5253219888177297<br/>COS(90) => -0.4480736161291702', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (18, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'COSH', 1, 'Y', '하이퍼볼릭 코사인 값을 반환합니다.<br/><br/>COSH(number)<br/>▪ number: 은(는) 임의의 실수를 나타냅니다.<br/><br/>COSH(4) => 27.308232836016487<br/>COSH(1) => 1.543080634815244<br/>COSH(-4) => 27.308232836016487<br/>COSH(9) => 4051.5420254925943', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (19, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'EXP', 1, 'Y', 'number를 지수로 한 e의 누승을 계산합니다.<br/><br/>EXP(number)<br/>▪ number: 은(는) 밑 e에 적용할 지수입니다. 상수 e는 자연 로그값의 밑인 2.71828182845904와 같습니다.<br/><br/>EXP(4) => 54.598150033144236<br/>EXP(1) => 2.718281828459045<br/>EXP(-4) => 0.01831563888873418<br/>EXP(9) => 8103.083927575384', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (20, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'EXPM1', 1, 'Y', 'number를 지수로 한 e의 누승에서 1을 뺀 값을 반환합니다.<br/><br/>EXPM1(number)<br/>▪ number: 은(는) 밑 e에 적용할 지수입니다. 상수 e는 자연 로그값의 밑인 2.71828182845904와 같습니다.<br/><br/>EXP(4) => 53.598150033144236<br/>EXP(1) => 1.718281828459045<br/>EXP(-4) => -0.9816843611112658<br/>EXP(9) => 8102.083927575384', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (21, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'FLOOR', 1, 'Y', '1의 배수가 되도록 절대 값을 내림합니다.<br/><br/>FLOOR(number)<br/>▪ number: 은(는) 내림하려는 수입니다.<br/><br/>FLOOR(1.234) => 1<br/>FLOOR(123.4) => 123<br/>FLOOR(1.00) => 1<br/>FLOOR(-1.234) => -2', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (22, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'GETEXPONENT', 1, 'Y', '부동 소수점의 표현으로 사용되는 불편 지수를 반환합니다.<br/><br/>GETEXPONENT(number)<br/>▪ number: 은(는) 지수를 가져올 대상 실수입니다.<br/><br/>GETEXPONENT(8) => 3<br/>GETEXPONENT(5.36870912E8) => 29<br/>GETEXPONENT(1.00) => 0<br/>GETEXPONENT(-9) => 3', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (23, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'LOG', 1, 'Y', '밑이 e인 로그값을 구합니다.<br/><br/>LOG(number)<br/>▪ number: 은(는) 로그값을 구하려는 양의 실수입니다<br/><br/>LOG(2.71828182846) => 1.0000000000003513<br/>LOG(10) => 2.302585092994046<br/>LOG(1.00) => 0<br/>LOG(-9) => "NaN"', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (24, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'LOG10', 1, 'Y', '밑이 10인 로그값을 구합니다.<br/><br/>LOG10(number)<br/>▪ number: 은(는) 밑이 10인 로그값을 구하려는 양의 실수입니다.<br/><br/>LOG10(2.71828182846) => 0.43429448190340436<br/>LOG10(10) => 1<br/>LOG10(1.00) => 0<br/>LOG10(-9) => "NaN"', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (25, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'LOG1P', 1, 'Y', 'number에 1을 더한 로그값을 구합니다.<br/><br/>LOG1P(number)<br/>▪ number: 은(는) 로그값을 구하려는 양의 실수입니다<br/><br/>LOG1P(1.71828182846) => 1.0000000000003513<br/>LOG1P(10) => 2.3978952727983707<br/>LOG1P(1.00) => 0.6931471805599453<br/>LOG1P(-9) => "NaN"', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (26, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'NEXTUP', 1, 'Y', '주어진 값 보다 큰 다음 부동 소수점 값을 반환합니다.<br/><br/>NEXTUP(number)<br/>▪ number: 은(는) 임의의 실수를 나타냅니다<br/><br/>NEXTUP(1.71828182846) => 1.7182818284600003<br/>NEXTUP(10) => 10.000000000000002<br/>NEXTUP(1.00) => 1.0000000000000002<br/>NEXTUP(-9) => -8.999999999999998', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (27, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'RINT', 1, 'Y', '인수와 가장 가까운 정수를 반환합니다.<br/><br/>RINT(number)<br/>▪ number: 은(는) 임의의 실수를 나타냅니다<br/><br/>RINT(123.45) => 123<br/>RINT(123.5) => 124<br/>RINT(1.00) => 1<br/>RINT(-123.45) => -123', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (28, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'ROUND', 1, 'Y', '인수를 반올림하여 반환합니다.<br/><br/>ROUND(number)<br/>▪ number: 은(는) 반올림하려는 수입니다.<br/><br/>ROUND(123.45) => 123<br/>ROUND(123.5) => 124<br/>ROUND(1.00) => 1<br/>ROUND(-123.45) => -123', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (29, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'SIGNUM', 1, 'Y', '인수의 부호 요소를 반환합니다.<br/><br/>SIGNUM(number)<br/>▪ number: 은(는) 부호를 구할 실수입니다<br/><br/>ROUND(123.45) => 1<br/>ROUND(1) => 1<br/>ROUND(0) => 0<br/>ROUND(-123.45) => -1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (30, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'SIN', 1, 'Y', '각도의 사인 값을 반환합니다.<br/><br/>SIN(number)<br/>▪ number: 은(는) 사인 값을 구하려는 라디안의 각도입니다. 각도 * PI()/180 = 라디안입니다.<br/><br/>SIN(45) => 0.8509035245341184<br/>SIN(10) => -0.5440211108893698<br/>SIN(-45) => -0.8509035245341184<br/>SIN(90) => 0.8939966636005579', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (31, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'SINH', 1, 'Y', '하이퍼볼릭 사인 값을 반환합니다.<br/><br/>SINH(number)<br/>▪ number: 은(는) 임의의 실수를 나타냅니다.<br/><br/>SINH(4) => 27.308232836016487<br/>SINH(1) => 1.1752011936438014<br/>SINH(-4) => -27.28991719712775<br/>SINH(9) => 4051.54190208279', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (32, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'SQRT', 1, 'Y', '수의 제곱근을 반환합니다.<br/><br/>SQRT(number)<br/>▪ number: 은(는) 제곱근을 반환하려는 수를 나타냅니다.<br/><br/>SQRT(4) => 2.0<br/>SQRT(1.234) => 1.1108555261599053<br/>SQRT(-4) => "NaN"<br/>SQRT(9) => 3.0', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (33, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'TAN', 1, 'Y', '각도의 탄젠트 값을 반환합니다<br/><br/>TAN(number)<br/>▪ number: 은(는) 탄젠트 값을 구할 라디안의 각도입니다. 각도 * PI()/180 = 라디안입니다.<br/><br/>TAN(45) => 1.6197751905438615<br/>TAN(10) => 0.6483608274590866<br/>TAN(-45) => -1.6197751905438615<br/>TAN(90) => -1.995200412208242', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (34, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'TANH', 1, 'Y', '하이퍼볼릭 탄젠트 값을 반환합니다.<br/><br/>TANH(number)<br/>▪ number: 은(는) 임의의 실수를 나타냅니다.<br/><br/>TANH(4) => 0.999329299739067<br/>TANH(1) => 0.7615941559557649<br/>TANH(-4) => -0.999329299739067<br/>TANH(9) => 0.999999969540041', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (35, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'TODEGREES', 1, 'Y', '라디안 형태의 각도를 도 단위로 바꿉니다.<br/><br/>DEGREES(angle)<br/>▪ angle: 은(는) 변환하려는 라디안 형태의 각도입니다.<br/><br/>TODEGREES(TORADIANS(45)) => 45<br/>TODEGREES(TORADIANS(1)) => 1<br/>TODEGREES(TORADIANS(-45)) => -45<br/>TODEGREES(TORADIANS(90)) => 90', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (36, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'TORADIANS', 1, 'Y', '도 단위로 표시된 각도를 라디안으로 변환합니다.<br/><br/>RADIANS(angle)<br/>▪ angle: 은(는) 라디안으로 변환할 각도입니다.<br/><br/>TORADIANS(45) => 0.7853981633974483<br/>TORADIANS(1) => 0.017453292519943295<br/>TORADIANS(-45) => -0.7853981633974483<br/>TORADIANS(90) => 1.5707963267948966', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (37, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'ULP', 1, 'Y', '인수의 ulp의 사이즈를 돌려줍니다. 부동 소수점 값의 ULP이 부동 소수점 값과 다음에 큰 절대치 실수 값의 포지티브 거리이다. <br/><br/>ULP(number)<br/>▪ number: 은(는) 임의의 실수를 나타냅니다.<br/><br/>ULP(123.456) => 1.4210854715202004E-14<br/>ULP(1) => 2.220446049250313E-16<br/>ULP(-45) => 7.105427357601002E-15<br/>ULP(90) => 1.4210854715202004E-14', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (38, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'ATAN2', 1, 'Y', ' -Pi에서 Pi까지의 라디안에서 지정된 x, y 좌표의 아크탄젠트 값을 구합니다. 단 -Pi 값은 제외됩니다.<br/><br/>ATAN2(x_num,y_num)<br/>▪ x_num: 은(는) 각을 구하려는 지점의 x 좌표입니다.<br/>▪ y_num: 은(는) 각을 구하려는 지점의 y 좌표입니다.<br/><br/>ATAN2(90,0) => 1.5707963267948966<br/>ATAN2(0,90) => 0.0<br/>ATAN2(90,90) => 0.7853981633974483<br/>ATAN2(90,-90) => 2.356194490192345', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (39, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'COPYSIGN', 1, 'Y', '두 번째 부동 소수점 인수의 부호와 최초의 부동 소수점 인수를 반환합니다.<br/><br/>COPYSIGN(magnitude, sign)<br/>▪ magnitude: 은(는) 결과의 크기를 제공하는 파라미터입니다.<br/>▪ sign: 은(는) 매개 변수는 결과의 부호를 제공합니다.<br/><br/>COPYSIGN(90,0) => 90.0<br/>COPYSIGN(125.9f, -0.4873f) => -125.9,<br/>COPYSIGN(-0.4873f, 125.9f) => 0.4873,<br/>COPYSIGN(90,-90) => -90.0', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (40, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'HYPOT', 1, 'Y', '직각삼각형의 빗변의 길이를 반환합니다.<br/><br/>HIPOT(x_num,y_num)<br/>▪ x_num: 은(는)  임의의 실수를 나타냅니다.<br/>▪ y_num: 은(는)  임의의 실수를 나타냅니다.<br/><br/>HYPOT(90,0) => 90.0<br/>HYPOT(90,90) => 127.27922061357856<br/>HYPOT(10,30) => 31.622776601683793<br/>HYPOT(90,-90) => -127.27922061357856', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (41, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'REMAINDER', 1, 'Y', '나눗셈의 나머지를 구합니다.<br/><br/>REMAINDER(number,divisor)<br/>▪ number: 은(는) 나머지를 구하려는 수입니다.<br/>▪ divisor: 은(는) 나누는 수입니다.<br/><br/>REMAINDER(90,5) => 0<br/>REMAINDER(91,90) => 1<br/>REMAINDER(10,30) => 10<br/>REMAINDER(90,-90) => 0', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (42, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'MAX', 1, 'Y', '최대값을 구합니다. <br/><br/>MAX(number1,number2)<br/>▪ number1: 은(는) 최대값을 구하려는 수입니다.<br/>▪ number2: 은(는) 최대값을 구하려는 수입니다.<br/><br/>MAX(90,5) => 90<br/>MAX(5,90) => 90<br/>MAX(123,123) => 123<br/>MAX(90,-90) => 90', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (43, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'MIN', 1, 'Y', '최소값을 구합니다.<br/><br/>MIN(number1,number2)<br/>▪ number1: 은(는) 최소값을 구하려는 수입니다.<br/>▪ number2: 은(는) 최소값을 구하려는 수입니다.<br/><br/>MIN(90,5) => 5<br/>MIN(5,90) => 5<br/>MIN(123,123) => 123<br/>MIN(90,-90) => -90', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (44, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'NEXTAFTER', 1, 'Y', 'x>y 일 때는 실수로 표현할 수 있는 수 중에 현재 x보다 바로 작은 실수, x&lt;y 일 때는 실수로 표현할 수 있는 수 중에 현재 x보다 바로 큰 실수, x=y 일 때는 x를 반환합니다.<br/><br/>NEXTAFTER(x_num,y_num)<br/>▪ x_num: 은(는) 임의의 실수를 나타냅니다.<br/>▪ y_num: 은(는) 임의의 실수를 나타냅니다.<br/><br/>NEXTAFTER(90,5) => 89.99999999999999<br/>NEXTAFTER(5,90) => 5.000000000000001<br/>NEXTAFTER(123,123) => 123<br/>NEXTAFTER(90,-90) => 89.99999999999999', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (45, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'POW', 1, 'Y', '밑수를 지정한 만큼 거듭제곱한 결과를 구합니다.<br/><br/>POW(number,power)<br/>▪ number: 은(는) 밑수입니다.<br/>▪ power: 은(는) 지수입니다.<br/><br/>POW(2,4) => 16<br/>POW(4,2) => 16<br/>POW(1.23,3) => 1.8608669999999998<br/>POW(90,-2) => 1.234567901234568E-4', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (46, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', 'SCALB', 1, 'Y', ' 2의 exponent승의 값에다, 플로팅 포인트값인 value를 곱한 결과를 반환한다. <br/><br/>SCALB(number,exponent)<br/>▪ number: 은(는) 임의의 실수를 나타냅니다.<br/>▪ exponent: 은(는) 밑수 2에 적용될 지수값입니다.<br/><br/>SCALB(2,4) => 8<br/>SCALB(4,2) => 16<br/>SCALB(1.23,3) => 9.84<br/>SCALB(90,-2) => 22.5', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (47, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'IF', 1, 'Y', '논리 검사를 수행하여 TRUE나 FALSE에 해당하는 값을 반환합니다.<br/><br/>IF(logical_test,value_if_true,value_if_false)<br/>▪ logical_test: 은(는) TRUE나 FALSE로 판정될 값이나 식입니다.<br/>▪ value_if_true: 은(는) logical_test가 TRUE일 때 돌려주는 값입니다. 생략하면 TRUE를 반환합니다. IF 함수를 일곱 번 중첩해서 쓸 수 있습니다.<br/>▪ value_if_false: 은(는) logical_test가 FALSE일 때 돌려주는 값입니다. 생략하면 FALSE를 반환합니다.<br/><br/>IF( ''TRUE'', 10, -10 ) => 10<br/>IF( ''FALSE'', 10, -10 ) => -10', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (48, 'PAGE-CALCULATION', 'TYPE_CONVERT', 'TYPE_CONVERT FIELD', 'TYPE_CONVERT FUNCTION', 'CAST', 1, 'Y', '지정한 타입으로 값을 변환하여 반환합니다.<br/><br/>CAST( parameta,type)<br/>▪ parameta: 은(는) 변환할 대상이 되는 문자열 혹은 숫자입니다.<br/>▪ type: 은(는)  ''FLOAT'', ''DOUBLE'', ''LONG'', ''STRING'', ''DATETIME'' 중 하나로 변환할 타입입니다.<br/><br/>CAST( ''100.123'', ''DOUBLE'') => 100.123<br/>CAST( TIMESTAMP(''2016-01-01T10:10:10''), ''DATETIME'') => ''2016-01-01T10:10:10.000Z''<br/>CAST( 1234, ''STRING'') =>  ''1234''<br/>CAST( ''100'', ''LONG'') => 100', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (49, 'PAGE-CALCULATION', 'TYPE_CONVERT', 'TYPE_CONVERT FIELD', 'TYPE_CONVERT FUNCTION', 'TIMESTAMP', 1, 'Y', '문자열 시간을 LONG 타입으로 변환합니다.<br/><br/>TIMESTAMP( datetime_string)<br/>TIMESTAMP( datetime_string,format)<br/>TIMESTAMP( datetime_string,format,timezone)<br/>TIMESTAMP( datetime_string,format,timezone, locale)<br/>▪ datetime_string: 은(는) 변환할 대상이 되는 날짜-시간을 표시하는 문자열입니다.<br/>▪ format: 은(는) 입력된 문자열을 변환할 구조를 의미합니다. 입력이 없을 경우 ''yyyy-MM-dd''T''HH:mm:ss[.SSS][ZZ]''가 적용됩니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/>▪ locale:  은(는)  출력 언어입니다.<br/><br/>TIMESTAMP( ''2011-01-04T10:00:00'' ) => 1294135200000<br/>TIMESTAMP( ''2013-05-04 20:20:00'', ''yyyy-MM-dd HH:mm:ss'' ) => 1367698800000<br/>CAST( TIMESTAMP( ''2015-02-04 23:00:00'', ''yyyy-MM-dd HH:mm:ss'' ), ''DATETIME'' ) => ''2015-02-04T23:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (50, 'PAGE-CALCULATION', 'TYPE_CONVERT', 'TYPE_CONVERT FIELD', 'TYPE_CONVERT FUNCTION', 'UNIX_TIMESTAMP', 1, 'Y', '문자열 시간을 LONG 타입으로 변환합니다. TIMESTAMP()결과에 1000을 나눈값과 동일합니다.<br/><br/>UNIX_TIMESTAMP( datetime_string)<br/>UNIX_TIMESTAMP( datetime_string,format)<br/>TIMESTAMP( datetime_string,format,timezone)<br/>TIMESTAMP( datetime_string,format,timezone, locale)<br/>▪ datetime_string: 은(는) 변환할 대상이 되는 날짜-시간을 표시하는 문자열입니다.<br/>▪ format: 은(는) 입력된 문자열을 변환할 구조를 의미합니다. 입력이 없을 경우 ''yyyy-MM-dd''T''HH:mm:ss[.SSS][ZZ]''가 적용됩니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/>▪ locale:  은(는)  출력 언어입니다.<br/><br/>UNIX_TIMESTAMP( ''2011-01-04T10:00:00'' ) => 1294135200<br/>UNIX_TIMESTAMP( ''2013-05-04 20:20:00'', ''yyyy-MM-dd HH:mm:ss'' ) => 1367698800<br/>CAST( UNIX_TIMESTAMP( ''2015-02-04 23:00:00'', ''yyyy-MM-dd HH:mm:ss'' )*1000, ''DATETIME'' ) => ''2015-02-04T23:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (51, 'PAGE-CALCULATION', 'TYPE_CONVERT', 'TYPE_CONVERT FIELD', 'TYPE_CONVERT FUNCTION', 'TIME_FORMAT', 1, 'Y', '시간을 지정한 구조에 따라 변환하여 문자열로반환합니다.<br/><br/>TIME_FORMAT( datetime, out.format = , out.timezone = , out.locale =  )<br/>▪ datetime: 은(는) 변환할 대상이 되는 날짜-시간입니다.<br/>▪ out.format : 은(는) 입력된 문자열을 변환할 구조를 의미합니다. <br/>▪ out.timezone : 은(는) 입력된 문자열을 변환할 timezone을 의미합니다.<br/>▪ out.locale: 은(는) 입력된 문자열을 변환할  지역을 의미합니다.<br/><br/>TIME_FORMAT( TIMESTAMP(''2016-01-01T10:10:10''), out.format=''yyyy-MM-dd'') => ''2016-01-01''<br/>TIME_FORMAT( now(), out.format=''yyyy-MM-dd EEEEEE'', out.locale=''ko'') =>  ''2018-06-26 화요일''<br/>TIME_FORMAT( ''2016-01-01T10:10:10'', out.format=''yyyy-MM-dd'') => ''2016-01-01''<br/>TIME_FORMAT( now(), ''yyyy-MM-dd EEEEEE'', ''Asia/Seoul'', ''ko'') =>  ''2018-06-26 화요일''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (52, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'ISNULL', 1, 'Y', '대상의 값이  NULL인 경우 1을  NULL이 아닌 경우 0을 반환합니다.<br/><br/>ISNULL(expr)<br/>▪ expr: 은(는) null을 포함할 수 있는 값 또는 표현식입니다.<br/><br/><br/>iSNULL( ''abc'' ) => 0<br/>ISNULL('''')=> 1<br/>ISNULL( REGEX(''Technology'' , ''F.*'' ) ) => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (53, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'NVL', 1, 'Y', '대상의 값이  NULL인 경우 지정된 값을 반환하고 NULL이 아닌 경우 대상의 값을 반환합니다.<br/><br/>NVL(expr1, expr2)<br/>▪ expr1: 은(는) null을 포함할 수 있는 값 또는 표현식입니다.<br/>▪ expr2: 은(는) null을 변환하기 위한 대상값입니다.<br/><br/>NVL( '''', 10) => 10<br/>NVL( ''abc'', 10) => ''abc''<br/>NVL( '''', ''123'') => ''123''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (55, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DATEDIFF', 1, 'Y', '두 날짜-시간의 날(day)의 차이를 반환합니다.<br/><br/>DATEDIFF( start_datetime, end_datetime  )<br/>▪ start_datetime: 은(는) 시작 날짜-시간입니다.<br/>▪ end_datetime: 은(는) 끝 날짜-시간입니다.<br/><br/>DATEDIFF( ''2011-01-04 00:00:00'', ''2011-01-05 00:00:00'' ) => 1<br/>DATEDIFF( ''2011-01-06 00:00:00'', ''2011-01-05 00:00:00'' ) => -1<br/>DATEDIFF( ''2011-01-04 00:00:00'', __time  ) => timestamp field에서 ''2011-01-04 00:00:00''를 뺀 차이를 날수(day)로 반환', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (56, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'SWITCH', 1, 'Y', '필드와 값을 비교하여 조건에 해당하는 값을 반환합니다.<br/><br/>SWITCH( dimesion_name , string1, string1_value, string2, string2_value, …., else_value )<br/>▪ dimesion_name: 은(는) 조건을 확인할 대상 필드입니다.<br/>▪ string1: 은(는) 필드와 비교할 값입니다.<br/>▪ string1_value: 은(는)  string1 이 필드 값과 같은 경우 반환할 값입니다.<br/>▪ string2: 은(는) 필드와 비교할 값입니다.<br/>▪ string2_value: 은(는)  string2 이 필드 값과 같은 경우 반환할 값입니다.<br/>▪ else_value: 은(는)  모든 조건이 만족하지 않은 경우 반환할 값입니다.<br/><br/><br/>SWITCH( ''TEST01'', ''TEST01'', 10, ''TEST02'', 20, 30) => 10<br/>SWITCH( ''TEST02'', ''TEST01'', 10, ''TEST02'', 20, 30) => 20<br/>SWITCH( ''TEST03'', ''TEST01'', 10, ''TEST02'', 20, 30) => 30<br/>SWITCH([Category] , ''Furniture'', 1, ''Office Supplies'', 2, 0 ) => category가 Furniture이면 1 Office Supplies이면 2 모두 아니면 0을 반환', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (57, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'CASE', 1, 'Y', '논리 검사를 수행하여 TRUE에 해당하는 값을 반환합니다.<br/><br/>CASE( logical_test1 , value_if_true1, logical_test2, value_if_true2, …., else_value )<br/>▪ logical_test1: 은(는) TRUE나 FALSE로 판정될 값이나 식입니다.<br/>▪ value_if_true1: 은(는) logical_test1가 TRUE일 때 돌려주는 값입니다<br/>▪ logical_test2: 은(는) TRUE나 FALSE로 판정될 값이나 식입니다.<br/>▪ value_if_true2: 은(는) logical_test2가 TRUE일 때 돌려주는 값입니다<br/>▪ else_value: 은(는)  모든 조건이 만족하지 않은 경우 반환할 값입니다.<br/><br/><br/>CASE( ''TEST01'' == ''TEST01'', 10, ''TEST01'' == ''TEST02'', 20, 30) => 10<br/>CASE( ''TEST02'' == ''TEST01'', 10, ''TEST02'' == ''TEST02'', 20, 30) => 20<br/>CASE( ''TEST03'' == ''TEST01'', 10, ''TEST03'' == ''TEST02'', 20, 30) => 30<br/>CASE( [Category] == ''Furniture'', 1, Category == ''Office Supplies'', 2, 0) => category가 Furniture이면 1 Office Supplies이면 2 모두 아니면 0을 반환', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (59, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'CONCAT', 1, 'Y', '여러 텍스트를 한 텍스트로 조인시킵니다.<br/><br/>CONCAT(text1,text2,...)<br/>▪ text1: text1,text2,... 은(는) 하나로 조인할 텍스트들 입니다.<br/>▪ text2: text1,text2,... 은(는) 하나로 조인할 텍스트들 입니다.<br/><br/>concat( "Category" , ''::'', "Sub-Category" )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (60, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'FORMAT', 1, 'Y', '지정된 위치에 값을 대입해서 문자열을 만들어 반환합니다.<br/><br/>FORMAT(format,formatArg1,...)<br/>▪ format: 은(는) 생성될 문자열의 정보를 가지고 있는 텍스트입니다.<br/>▪ formatArg1: formatArg1,… 은(는) 생성될 문자열에 포함될 값들입니다.<br/><br/>FORMAT(''abc'') => ''abc''<br/>FORMAT(''abc-%s-%d'', ''123'', 123) => ''abc-123-123''<br/>FORMAT(''abc-%03d-%f'', 12, 123.0)=> ''abc-012-123.000000''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (61, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'LPAD', 1, 'Y', '입력된 문자열의 길이가 부족한 만큼 왼쪽에 지정된 문자를 추가한 문자를 반환한다.<br/><br/>LPAD(text,length,character)<br/>▪ text: 은(는) 대상이 되는 문자열입니다.<br/>▪ length: 은(는)  반환하고자하는 문자열의 길이입니다.<br/>▪ character: 은(는) 부족한 부분을 채워 넣을 문자입니다.<br/><br/>LPAD(''123'', 10, ''0'') => ''0000000123''<br/>LPAD(''abc'', 2, ''0'') => ''abc''<br/>LPAD(''abc'', 5, ''_'')=> ''__abc''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (62, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'RPAD', 1, 'Y', '입력된 문자열의 길이가 부족한 만큼 오른쪽에 지정된 문자를 추가한 문자를 반환한다.<br/><br/>RPAD(text,length,character)<br/>▪ text: 은(는) 대상이 되는 문자열입니다.<br/>▪ length: 은(는)  반환하고자하는 문자열의 길이입니다.<br/>▪ character: 은(는) 부족한 부분을 채워 넣을 문자입니다.<br/><br/>RPAD(''123'', 10, ''0'') => ''1230000000''<br/>RPAD(''abc'', 2, ''0'') => ''abc''<br/>RPAD(''abc'', 5, ''_'')=> ''abc__''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (63, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'UPPER', 1, 'Y', '텍스트 문자열을 모두 대문자로 바꿉니다.<br/><br/>UPPER(text)<br/>▪ text: 은(는) 대문자로 바꾸려는 텍스트입니다.<br/><br/>UPPER(''abc'') => ''ABC''<br/>UPPER(''Abc'') => ''ABC''<br/>UPPER(''ABC'')=> ''ABC''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (64, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'LOWER', 1, 'Y', '텍스트 문자열의 모든 문자를 소문자로 변환합니다.<br/><br/>LOWER(text)<br/>▪ text: 은(는) 소문자로 바꾸려는 텍스트입니다. 문자가 아닌 경우는 변환되지 않습니다.<br/><br/>LOWER(''abc'') => ''abc''<br/>LOWER(''Abc'') => ''abc''<br/>LOWER(''ABC'')=> ''abc''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (65, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'SPLIT', 1, 'Y', '특정 분리자로 문자열을 분리하여 지정된 위치의 문자열을 반환합니다.<br/><br/>SPLIT(text,delimitor,index)<br/>▪ text: 은(는) 대상이 되는 문자열입니다.<br/>▪ delimitor: 은(는)  문자열을 분해하고자 하는 분리자입니다.<br/>▪ index: 은(는) 반환하고자 하는 분해된 문자열의 위치입니다.<br/><br/>SPLIT(''first:second'', '':'', 0) => ''first''<br/>SPLIT(''first:second'', '':'', 1) => ''second''<br/>SPLIT(''first:second'', '':'', 2) => null<br/>SPLIT(''first:second'', '','', 0) => ''first:second''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (66, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'SPLITREGEX', 1, 'Y', '특정 분리자(정규표현식)로 문자열을 분리하여 지정된 위치의 문자열을 반환합니다.<br/><br/>SPLITREGEX(text,delimitor,index)<br/>▪ text: 은(는) 대상이 되는 문자열입니다.<br/>▪ delimitor: 은(는)  문자열을 분해하고자 하는 정규표현식으로 표현된 분리자입니다.<br/>▪ index: 은(는) 반환하고자 하는 분해된 문자열의 위치입니다.<br/><br/>SPLITREGEX(''first/second'', ''\\/'', 0) => ''first''<br/>SPLITREGEX(''first/second'', ''\\/'', 1) => ''second''<br/>SPLITREGEX(''first/second'', ''\\/'', 2) => null<br/>SPLITREGEX(''first/second'', '','', 0) => ''first/second''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (67, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'PROPER', 1, 'Y', '각 단어의 첫째 문자를 대문자로 변환하고 나머지 문자는 소문자로 변환합니다.<br/><br/>PROPER(text)<br/>▪ text: 은(는)  대상이 되는 문자열입니다.<br/><br/>PROPER(''abc'') => ''Abc''<br/>PROPER(''ABC'') => ''Abc''<br/>PROPER(''123'') => ''123''<br/>PROPER('''') => ''''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (68, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'LENGTH', 1, 'Y', '텍스트 문자열 내의 문자 개수를 구합니다.<br/><br/>LENGTH(text)<br/>▪ text: 은(는) 사용자가 찾는 개수의 문자가 들어 있는 텍스트입니다. 공백도 문자 개수에 포함됩니다.<br/><br/>LENGTH(''abc'') => 3<br/>LENGTH('''') => 0<br/>LENGTH(''123 abc'') => 7', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (69, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'STRLEN', 1, 'Y', '텍스트 문자열 내의 문자 개수를 구합니다.<br/><br/>STRLEN(text)<br/>▪ text: 은(는) 사용자가 찾는 개수의 문자가 들어 있는 텍스트입니다. 공백도 문자 개수에 포함됩니다.<br/><br/>STRLEN(''abc'') => 3<br/>STRLEN('''') => 0<br/>STRLEN(''123 abc'') => 7', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (70, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'LEFT', 1, 'Y', '텍스트 문자열의 시작 지점부터 지정한 수만큼의 문자를 반환합니다.<br/><br/>LEFT(text,num_chars)<br/>▪ text: 은(는) 추출하려는 문자가 들어 있는 텍스트 문자열입니다.<br/>▪ num_chars: 은(는) 왼쪽(LEFT)부터 추출할 문자 수를 지정합니다. <br/><br/>LEFT(''abcdefg'', 3) => ''abc''<br/>LEFT(''abc'', 5) => ''abc''<br/>LEFT(''123 abc'', 5) => ''123 a''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (71, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'RIGHT', 1, 'Y', '텍스트 문자열의 끝 지점부터 지정한 수만큼의 문자를 반환합니다.<br/><br/>RIGHT(text,num_chars)<br/>▪ text: 은(는) 추출하려는 문자가 들어 있는 텍스트 문자열입니다.<br/>▪ num_chars: 은(는) 추출할 문자 수를 지정합니다. <br/><br/>RIGHT(''abcdefg'', 3) => ''efg''<br/>RIGHT(''abc'', 5) => ''abc''<br/>RIGHT(''123 abc'', 5) => ''3 abc''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (72, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'MID', 1, 'Y', '시작 위치 및 마지막 위치가 지정된 텍스트 문자열의 중간 부분에서 문자를 반환합니다.<br/><br/>MID(text,start_num,end_num)<br/>▪ text: 은(는) 문자를 추출할 텍스트 문자열입니다.<br/>▪ start_num: 은(는) 추출할 첫 문자의 위치입니다. 텍스트에서 첫 문자는 0이 됩니다.<br/>▪ end_num: 은(는) 추출할 마지막 문자의 다음 위치입니다.<br/><br/>MID(''abcdefg'', 1, 5) => ''bcde''<br/>MID(''abc'', 2, 3) => ''c''<br/>MID(''123 abc'', 4, 4) => ''''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (73, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'SUBSTRING', 1, 'Y', '시작 위치에서 지정한 길이만큼을  지정된 텍스트 문자열의 중간 부분에서 문자를 반환합니다.<br/><br/>SUBSTRING(text,start_num,length)<br/>▪ text: 은(는) 문자를 추출할 텍스트 문자열입니다.<br/>▪ start_num: 은(는) 추출할 첫 문자의 위치입니다. 텍스트에서 첫 문자는 0이 됩니다.<br/>▪ length: 은(는) 추출할 문자열의 길이입니다.<br/><br/>SUBSTRING(''abcdefg'', 1, 5) => ''bcde''<br/>SUBSTRING(''abc'', 2, 3) => ''c''<br/>SUBSTRING(''123 abc'', 4, 4) => ''''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (74, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'INDEXOF', 1, 'Y', '텍스트 문자열에서 지정된 문자열을 찾아 그 위치를 반환합니다.<br/><br/>INDEXOF(text,find_text)<br/>▪ text: 은(는) 대상이 되는 텍스트 문자열입니다.<br/>▪ find_text: 은(는) 찾고자하는 텍스트 문자열입니다.<br/><br/>INDEXOF(''abcdefg'', ''cde'') => 2<br/>INDEXOF(''abcdefg'', ''bdf'') => -1<br/>INDEXOF(''123 abc'', ''3 a'') => 2', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (75, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'REPLACE', 1, 'Y', '텍스트 문자열에서 지정된 문자열을 찾아 다른 문자열로 치환합니다.<br/><br/>REPLACE(text,find_text,replace_text)<br/>▪ text: 은(는) 대상이 되는 텍스트 문자열입니다.<br/>▪ find_text: 은(는) 찾고자하는 텍스트 문자열입니다.<br/><br/>REPLACE(''abcdefg'', ''cde'', ''-'') => ''ab-fg''<br/>REPLACE(''abcdefg'', ''bdf'', ''-'') => ''abcdefg''<br/>REPLACE(''1 2 3'', '' '', '' AND '') => ''1 AND 2 AND 3''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (76, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'TRIM', 1, 'Y', '단어 사이에 들어간 공백 하나를 제외하고 텍스트 문자열에서 모든 공백을 제거합니다.<br/><br/>TRIM(text)<br/>▪ text: 은(는) 공백을 제거하려는 텍스트입니다.<br/><br/>TRIM('' abc'') => ''abc''<br/>TRIM(''abc '') => ''abc''<br/>TRIM('' a b c '') => ''a b c''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (77, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'BTRIM', 1, 'Y', '대상 문자열에서 왼쪽, 오른쪽에 있는 공백 혹은 제거할 문자열을 제거하여 반환합니다.<br/><br/>BTRIM(text)<br/>BTRIM(text, strip)<br/>▪ text: 은(는) 공백을 제거하려는 텍스트입니다.<br/>▪ strip: 은(는) 제거할 문자열입니다..<br/><br/>BTRIM('' abc'') => ''abc''<br/>BTRIM(''abc '') => ''abc''<br/>BTRIM(''abc123abc'',''abc'') => ''123''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (78, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'LTRIM', 1, 'Y', '대상 문자열에서 왼쪽에 있는 공백 혹은 제거할 문자열을 제거하여 반환합니다.<br/><br/>LTRIM(text)<br/>LTRIM(text, strip)<br/>▪ text: 은(는) 공백을 제거하려는 텍스트입니다.<br/>▪ strip: 은(는) 제거할 문자열입니다..<br/><br/>LTRIM('' abc'') => ''abc''<br/>LTRIM(''abc '') => ''abc ''<br/>LTRIM(''abc123abc'',''abc'') => ''123abc''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (79, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'RTRIM', 1, 'Y', '대상 문자열에서 오른쪽에 있는 공백 혹은 제거할 문자열을 제거하여 반환합니다.<br/><br/>RTRIM(text)<br/>RTRIM(text, strip)<br/>▪ text: 은(는) 공백을 제거하려는 텍스트입니다.<br/>▪ strip: 은(는) 제거할 문자열입니다..<br/><br/>RTRIM('' abc'') => '' abc''<br/>RTRIM(''abc '') => ''abc''<br/>RTRIM(''abc123abc'',''abc'') => ''abc123''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (82, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'IN', 1, 'Y', '첫째 입력 값이 다른 입력 값에 있는 지를 확인하여 있으면1 없으면 0을 반환합니다.<br/><br/>IN(search,value1,value2,...)<br/>▪ search: 은(는) 찾고자 하는 값입니다. <br/>▪ value1: value1,value2,... 은(는) 비교 대상이 되는 값들입니다.<br/><br/>IN( 10, 1, 10, 100) => 1<br/>IN( 0, 1, 10, 100) => 0<br/>IN( ''abc'', ''123'', ''abc'', ''efg'', ''456'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (83, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'BETWEEN', 1, 'Y', '첫째 입력 값이 범위에 속하는지를 확인하여 있으면1 없으면 0을 반환합니다.<br/><br/>BETWEEN(search,start_value,end_value2)<br/>▪ search: 은(는) 찾고자 하는 값입니다. <br/>▪ start_value:  은(는) 비교 범위의 시작이 되는 값입니다.<br/>▪ end_value:  은(는) 비교 범위의 끝이 되는 값입니다.<br/><br/>BETWEEN( 10, 1, 100) => 1<br/>BETWEEN( 0, 1, 100) => 0<br/>BETWEEN( ''aab'', ''aaa'', ''aac'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (84, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'STARTSWITH', 1, 'Y', '대상 문자열이 시작 문자열로 시작하는지를 확인하여  같으면 1 다르면 0을 반환합니다.<br/><br/>STARTSWITH(search,prefix)<br/>▪ search: 은(는) 대상이 되는 문자열입니다. <br/>▪ prefix:  은(는) 매칭을 확인하고자하는 시작 문자열입니다.<br/><br/>STARTSWITH( ''abcdef'', ''abc'') => 1<br/>STARTSWITH( ''abcdef'', ''aabc'') => 0<br/>STARTSWITH( ''1234'', ''12'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (85, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'ENDSWITH', 1, 'Y', '대상 문자열이 시작 문자열로 끝나는지를 확인하여  같으면 1 다르면 0을 반환합니다.<br/><br/>ENDSWITH(search,suffix)<br/>▪ search: 은(는) 대상이 되는 문자열입니다. <br/>▪ suffix:  은(는) 매칭을 확인하고자하는 끝 문자열입니다.<br/><br/>ENDSWITH( ''abcdef'', ''def'') => 1<br/>ENDSWITH( ''abcdef'', ''de'')=> 0<br/>ENDSWITH( ''1234'', ''1234'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (86, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'STARTSWITHIGNORECASE', 1, 'Y', '대상 문자열이 대소문자를 무시하고 시작 문자열로 시작하는지를 확인하여  같으면 1 다르면 0을 반환합니다.<br/><br/>STARTSWITHIGNORECASE(search,prefix)<br/>▪ search: 은(는) 대상이 되는 문자열입니다. <br/>▪ prefix:  은(는) 매칭을 확인하고자하는 시작 문자열입니다.<br/><br/>STARTSWITHIGNORECASE( ''ABCDEF'', ''abc'') => 1<br/>STARTSWITHIGNORECASE( ''abcdef'', ''ABC'') => 1<br/>STARTSWITHIGNORECASE( ''1234'', ''a12'') => 0', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (87, 'PAGE-CALCULATION', 'LOGICAL', 'LOGICAL FIELD', 'LOGICAL FUNCTION', 'ENDSWITHIGNORECASE', 1, 'Y', '대상 문자열이 대소문자를 무시하고  시작 문자열로 끝나는지를 확인하여  같으면 1 다르면 0을 반환합니다.<br/><br/>ENDSWITHIGNORECASE(search,suffix)<br/>▪ search: 은(는) 대상이 되는 문자열입니다. <br/>▪ suffix:  은(는) 매칭을 확인하고자하는 끝 문자열입니다.<br/><br/>ENDSWITHIGNORECASE( ''ABCDEF'', ''def'')=> 1<br/>ENDSWITHIGNORECASE( ''abcdef'', ''deF'') => 1<br/>ENDSWITHIGNORECASE( ''1234'', ''34'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (88, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'CONTAINS', 1, 'Y', '텍스트 문자열에서 지정된 문자열을 찾아 있으면1 없으면 0을 반환합니다.<br/><br/>CONTAINS(text,find_text)<br/>▪ text: 은(는) 대상이 되는 텍스트 문자열입니다.<br/>▪ find_text: 은(는) 찾고자하는 텍스트 문자열입니다.<br/><br/>CONTAINS(''abcdefg'', ''cde'') => 1<br/>CONTAINS(''abcdefg'', ''bdf'') => 0<br/>CONTAINS(''123 abc'', ''3 a'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (89, 'PAGE-CALCULATION', 'STRING', 'STRING FIELD', 'STRING FUNCTION', 'MATCH', 1, 'Y', 'regex_text으로 match를 확인하여 matching되면 1 아니면 0을 반환한다.<br/><br/>MATCH( text , regex_text )<br/>▪ text: 은(는) 대상이 되는 텍스트 문자열입니다.<br/>▪ regex_text: 은(는) 찾고자하는 정규 표현식 문자열입니다.<br/><br/>MATCH(''Funiture'' , ''F.*'' ) => 1<br/>MATCH(''Funiture'' , ''tu.*'' ) => 1<br/>MATCH(''Technology'' , ''F.*'' ) => 0', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (90, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'NOW', 1, 'Y', '현재 시간을 반환합니다.<br/><br/>NOW()<br/><br/>NOW() => 1496033278862<br/>CAST( NOW(), ''DATETIME'') => ''2017-05-29T04:47:58.862Z''<br/>DATEDIFF( ''2011-01-04 00:00:00'', NOW()  ) => 2337', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (91, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'CURRENT_TIME', 1, 'Y', '현재 시간을 문자열로 반환합니다.<br/><br/>CURRENT_TIME()<br/><br/>CURRENT_TIME() => ''2018-06-20T00:49:43.753Z''<br/>DATEDIFF( ''2011-01-04 00:00:00'', CURRENT_TIME()) => 2724', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (92, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'RECENT', 1, 'Y', '현재 시간을 기준으로 입력된 범위에 따라 기간을 반환합니다.<br/><br/>RECENT(beforenow)<br/>RECENT(beforenow, afternow)<br/>▪ beforenow: 은(는) 현재 시간을 기준으로 이전 시간까지의 기간입니다.  (Y-year, M-month, W-week, D-day, H-hour, m-minute, s-seconde )<br/>▪ afternow:  은(는) 현재 시간을 기준으로 이후 시간까지의 기간입니다. <br/><br/>RECENT(''12M'') => ''2017-06-20T00:38:10.407Z/2018-06-20T00:38:10.407Z''<br/>RECENT(''30D'',''30H'') => ''2018-05-21T00:38:10.408Z/2018-06-18T18:38:10.408Z''<br/>', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (93, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'BUCKETSTART', 1, 'Y', '기준 시간이 속하는 시간 단위 bucket의 시작 시간을  millisecond로 반환합니다.<br/><br/>BUCKETSTART( base_time, granularity_type )<br/>▪ base_time: 은(는) 기준이 되는 시간입니다.  <br/>▪ granularity_type:  은(는) bucket의 크기를 의미하는 시간의 단위입니다. ( SECOND-PT1S, MINUTE-PT1M, FIVE_MINUTE-PT5M, TEN_MINUTE-PT10M, HOUR-PT5H, SIX_HOUR-PT6H,DAY-P1D, WEEK-P1W, MONTH-P1M, QUARTER-P3M, YEAR-P1Y )<br/><br/>BUCKETSTART( DATETIME(''2018-02-03T10:12:10''), ''TEN_MINUTE'') =>  1517652600000<br/>BUCKETSTART( DATETIME(''2018-02-03T10:12:10''), ''PT10M'') => 1517652600000<br/>BUCKETSTART( DATETIME(''2018-02-03T10:12:10''), ''YEAR'') => 1514764800000', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (94, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'BUCKETEND', 1, 'Y', '기준 시간이 속하는 시간 단위 bucket의 끝 시간을  millisecond로 반환합니다.<br/><br/>BUCKETEND( base_time, granularity_type )<br/>▪ base_time: 은(는) 기준이 되는 시간입니다.  <br/>▪ granularity_type:  은(는) bucket의 크기를 의미하는 시간의 단위입니다. ( SECOND-PT1S, MINUTE-PT1M, FIVE_MINUTE-PT5M, TEN_MINUTE-PT10M, HOUR-PT5H, SIX_HOUR-PT6H,DAY-P1D, WEEK-P1W, MONTH-P1M, QUARTER-P3M, YEAR-P1Y )<br/><br/>BUCKETEND( DATETIME(''2018-02-03T10:12:10''), ''TEN_MINUTE'') =>  1517653200000<br/>BUCKETEND( DATETIME(''2018-02-03T10:12:10''), ''PT10M'') => 1517653200000<br/>BUCKETEND( DATETIME(''2018-02-03T10:12:10''), ''YEAR'') => 1546300800000', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (95, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'BUCKETSTARTDATETIME', 1, 'Y', '기준 시간이 속하는 시간 단위 bucket의 시작 시간을  datetime으로 반환합니다.<br/><br/>BUCKETSTARTDATETIME( base_time, granularity_type )<br/>▪ base_time: 은(는) 기준이 되는 시간입니다.  <br/>▪ granularity_type:  은(는) bucket의 크기를 의미하는 시간의 단위입니다. ( SECOND-PT1S, MINUTE-PT1M, FIVE_MINUTE-PT5M, TEN_MINUTE-PT10M, HOUR-PT5H, SIX_HOUR-PT6H,DAY-P1D, WEEK-P1W, MONTH-P1M, QUARTER-P3M, YEAR-P1Y )<br/><br/>BUCKETSTARTDATETIME( DATETIME(''2018-02-03T10:12:10''), ''TEN_MINUTE'') =>  ''2018-02-03T10:10:00.000Z''<br/>BUCKETSTARTDATETIME( DATETIME(''2018-02-03T10:12:10''), ''PT10M'') => ''2018-02-03T10:10:00.000Z''<br/>BUCKETSTARTDATETIME( DATETIME(''2018-02-03T10:12:10''), ''YEAR'') => ''2018-01-01T00:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (96, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'BUCKETENDDATETIME', 1, 'Y', '기준 시간이 속하는 시간 단위 bucket의 끝 시간을  datetime으로 반환합니다.<br/><br/>BUCKETENDDATETIME( base_time, granularity_type )<br/>▪ base_time: 은(는) 기준이 되는 시간입니다.  <br/>▪ granularity_type:  은(는) bucket의 크기를 의미하는 시간의 단위입니다. ( SECOND-PT1S, MINUTE-PT1M, FIVE_MINUTE-PT5M, TEN_MINUTE-PT10M, HOUR-PT5H, SIX_HOUR-PT6H,DAY-P1D, WEEK-P1W, MONTH-P1M, QUARTER-P3M, YEAR-P1Y )<br/><br/>BUCKETENDDATETIME( DATETIME(''2018-02-03T10:12:10''), ''TEN_MINUTE'') => ''2018-02-03T10:20:00.000Z''<br/>BUCKETENDDATETIME( DATETIME(''2018-02-03T10:12:10''), ''PT10M'') => ''2018-02-03T10:20:00.000Z''<br/>BUCKETENDDATETIME( DATETIME(''2018-02-03T10:12:10''), ''YEAR'') => ''2019-01-01T00:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (97, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'ADD_TIME', 1, 'Y', '기준 시간에서 기간을 더하여 반환합니다.<br/><br/>ADD_TIME(base_time, period)<br/>▪ base_time: 은(는) 기준이 되는 시간입니다.  <br/>▪ period:  은(는) 추가하고자하는 기간입니다. (Y-year, M-month, W-week, D-day, H-hour, m-minute, s-seconde )<br/><br/>ADD_TIME( ''2011-01-04 00:00:00'', ''1M'') => ''2011-02-04T00:00:00.000Z''<br/>ADD_TIME( ''2011-01-04 00:00:00'', ''1Y'') =>  ''2012-01-04T00:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (98, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'SUB_TIME', 1, 'Y', '기준 시간에서 기간을 빼고 반환합니다.<br/><br/>SUB_TIME(base_time, period)<br/>▪ base_time: 은(는) 기준이 되는 시간입니다.  <br/>▪ period:  은(는) 빼고자하는 기간입니다. (Y-year, M-month, W-week, D-day, H-hour, m-minute, s-seconde )<br/><br/>SUB_TIME( ''2011-01-04 00:00:00'', ''1M'') => ''2010-12-04T00:00:00.000Z''<br/>SUB_TIME( ''2011-01-04 00:00:00'', ''1Y'') =>  ''2010-01-04T00:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (99, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DIFFTIME', 1, 'Y', '두 시간의 차이를 지정된 시간 단위로 반환합니다.<br/><br/>DIFFTIME( time_unit, start_time, end_time)<br/>▪ time_unit: 은(는) 결과의 시간 단위입니다. ( MILLIS, EPOCH, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, YEAR )  <br/>▪ start_time:  은(는) 시작 시간입니다.<br/>▪ end_time:  은(는) 끝 시간입니다. <br/><br/><br/>DIFFTIME( ''HOUR'', ''2011-01-04 00:00:00'', ''2011-01-04 10:00:00'') = > 10<br/>DIFFTIME( ''MINUTE'', ''2011-01-04 00:00:00'', ''2011-01-04 10:00:00'') => 600', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (100, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DAYNAME', 1, 'Y', '입력된 시간을 시간대와 언어에 따라 요일을 반환합니다.<br/><br/>DAYNAME( datetime )<br/>DAYNAME( datetime, timezone )<br/>DAYNAME( datetime, timezone, locale )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/>▪ locale:  은(는)  출력 언어입니다.<br/><br/><br/>DAYNAME( ''2011-01-04 00:00:00'', ''Asia/Seoul'', ''ko'') =>  ''화요일''<br/>DAYNAME( ''2011-01-04 00:00:00'', ''America/Los_Angeles'', ''en'') => ''Tuesday''<br/>DAYNAME( ''2011-01-04 00:00:00'', ''Asia/Beijing'', ''zh'') => ''星期二''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (101, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DAYOFMONTH', 1, 'Y', '달을 기준으로 몇번째 일인지를 반환한다.<br/><br/>DAYOFMONTH( datetime )<br/>DAYOFMONTH( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>DAYOFMONTH( ''2011-01-04 00:00:00'') => 4<br/>DAYOFMONTH( ''2011-01-30 00:00:00'') => 30', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (102, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'LASTDAYOFMONTH', 1, 'Y', '달을 기준으로 마지막 일자를 반환한다.<br/><br/>LASTDAYOFMONTH( datetime )<br/>LASTDAYOFMONTH( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>LASTDAYOFMONTH( ''2011-01-04 00:00:00'') => 31<br/>LASTDAYOFMONTH( ''2011-02-10 00:00:00'') => 28', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (103, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DAYOFWEEK', 1, 'Y', '주를 기준으로 몇번째 일인지를 반환한다.<br/><br/>DAYOFWEEK( datetime )<br/>DAYOFWEEK( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>DAYOFWEEK( ''2011-01-10 00:00:00'') => 1(월요일)<br/>DAYOFWEEK( ''2011-01-30 00:00:00'') => 7(일요일) ', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (104, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DAYOFYEAR', 1, 'Y', '년을 기준으로 몇번째 일인지를 반환한다.<br/><br/>DAYOFYEAR( datetime )<br/>DAYOFYEAR( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>DAYOFYEAR( ''2011-02-10 00:00:00'') => 41<br/>DAYOFYEAR( ''2011-12-31 00:00:00'') => 365', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (105, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'WEEKOFWEEKYEAR', 1, 'Y', '주 번호가 속하는 연도에서 몇번째 주인지를 반환합니다. <br/><br/>WEEKOFWEEKYEAR( datetime )<br/>WEEKOFWEEKYEAR( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>WEEKOFWEEKYEAR( ''2011-01-01 00:00:00'') => 52<br/>WEEKOFWEEKYEAR( ''2011-01-07 00:00:00'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (106, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'WEEKYEAR', 1, 'Y', '주 번호가 속하는 연도를 반환합니다. <br/><br/>WEEKYEAR( datetime )<br/>WEEKYEAR( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>WEEKYEAR( ''2011-01-01 00:00:00'') => 2010<br/>WEEKYEAR( ''2011-12-31 00:00:00'') => 2011', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (107, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'HOUR', 1, 'Y', '대상 시간에서 시를 반환합니다.<br/><br/>HOUR( datetime )<br/>HOUR( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>HOUR( ''2011-01-04 10:00:00'' ) => 10<br/>HOUR( ''2011-01-04 20:20:00'' ) => 20<br/>HOUR( ''2011-01-04 23:00:00'' ) => 23', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (108, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'MONTH', 1, 'Y', '대상 시간에서 월을 반환합니다.<br/><br/>MONTH( datetime )<br/>MONTH( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>MONTH( ''2011-01-04 10:00:00'' ) => 1<br/>MONTH( ''2011-05-04 20:20:00'' ) => 5<br/>MONTH( ''2012-10-04 23:00:00'' ) => 10', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (109, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'MONTHNAME', 1, 'Y', '입력된 시간을 시간대와 언어에 따라 월을 반환합니다.<br/><br/>MONTHNAME( datetime )<br/>MONTHNAME( datetime, timezone )<br/>MONTHNAME( datetime, timezone, locale )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/>▪ locale:  은(는)  출력 언어입니다.<br/><br/><br/>MONTHNAME( ''2011-01-04 10:00:00'', ''Asia/Seoul'', ''ko'' ) => ''1월''<br/>MONTHNAME( ''2011-05-04 20:20:00'', ''America/Los_Angeles'', ''en'' ) => ''May''<br/>MONTHNAME( ''2012-10-04 23:00:00'', ''Asia/Beijing'', ''zh'' ) => ''十月''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (110, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'YEAR', 1, 'Y', '대상 시간에서 년을 반환합니다.<br/><br/>YEAR( datetime )<br/>YEAR( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>YEAR( ''2011-01-04 10:00:00'' ) => 2011<br/>YEAR( ''2013-05-04 20:20:00'' ) => 2013<br/>YEAR( ''2015-10-04 23:00:00'' ) => 2015', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (111, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'FIRST_DAY', 1, 'Y', '대상 시간에서 월의 첫번째 일자를 반환합니다.<br/><br/>FIRST_DAY( datetime )<br/>FIRST_DAY( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>FIRST_DAY( ''2011-01-04 10:00:00'' ) => ''2011-01-01T10:00:00.000Z''<br/>FIRST_DAY( ''2013-05-04 20:20:00'' ) => ''2013-05-01T20:20:00.000Z''<br/>FIRST_DAY( ''2015-10-04 23:00:00'' ) => ''2015-10-01T23:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (112, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'LAST_DAY', 1, 'Y', '대상 시간에서 월의 마지막 일자를 반환합니다.<br/><br/>LAST_DAY( datetime )<br/>LAST_DAY( datetime, timezone )<br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>LAST_DAY( ''2011-01-04 10:00:00'' ) => ''2011-01-31T10:00:00.000Z''<br/>LAST_DAY( ''2013-05-04 20:20:00'' ) => ''2013-05-31T20:20:00.000Z''<br/>LAST_DAY( ''2015-02-04 23:00:00'' ) => ''2015-02-28T23:00:00.000Z''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (113, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DATETIME', 1, 'Y', '날짜-시간 문자열을 시간으로 변환하여 반환합니다.<br/><br/>DATETIME( datetime_string )<br/>DATETIME( datetime_string, format )<br/>DATETIME( datetime_string, format, timezone )<br/>▪ datetime_string: 은(는) 변환할 대상이 되는 날짜-시간을 표시하는 문자열입니다.<br/>▪ format: 은(는) 입력된 문자열을 변환할 구조를 의미합니다. 입력이 없을 경우 ''yyyy-MM-dd''T''HH:mm:ss[.SSS][ZZ]''가 적용됩니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>DATETIME( ''2011-01-04T10:00:00'' ) => ''2011-01-04T10:00:00.000Z''<br/>DATETIME( ''2011-01-04 10:00:00'', ''yyyy-MM-dd HH:mm:ss'' ) => ''2011-01-04T10:00:00.000Z''<br/>DATETIME( ''2011-01-04 10:00:00'', ''yyyy-MM-dd HH:mm:ss'', ''Asia/Seoul'') => ''2011-01-04T10:00:00.000+09:00''', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (114, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DATETIME_MILLIS', 1, 'Y', '날짜-시간 문자열을 millisecond로 변환하여 반환합니다.<br/><br/>DATETIME_MILLIS( datetime_string )<br/>DATETIME_MILLIS( datetime_string, format )<br/>DATETIME_MILLIS( datetime_string, format, timezone )<br/>▪ datetime_string: 은(는) 변환할 대상이 되는 날짜-시간을 표시하는 문자열입니다.<br/>▪ format: 은(는) 입력된 문자열을 변환할 구조를 의미합니다. 입력이 없을 경우 ''yyyy-MM-dd''T''HH:mm:ss[.SSS][ZZ]''가 적용됩니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/>DATETIME_MILLIS( ''2011-01-04T10:00:00'' ) => 1294135200000<br/>DATETIME_MILLIS( ''2011-01-04 10:00:00'', ''yyyy-MM-dd HH:mm:ss'' ) => 1294135200000<br/>DATETIME_MILLIS( ''2011-01-04 10:00:00'', ''yyyy-MM-dd HH:mm:ss'', ''Asia/Seoul'') => 1294102800000', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (115, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'TIMESTAMP_VALIDATE', 1, 'Y', '문자열 시간을 변환 가능 여부를 boolean으로 반환합니다.<br/><br/>TIMESTAMP_VALIDATE( datetime_string)<br/>TIMESTAMP_VALIDATE( datetime_string,format)<br/>TIMESTAMP_VALIDATE( datetime_string,format,timezone)<br/>TIMESTAMP_VALIDATE( datetime_string,format,timezone, locale)<br/>▪ datetime_string: 은(는) 변환할 대상이 되는 날짜-시간을 표시하는 문자열입니다.<br/>▪ format: 은(는) 입력된 문자열을 변환할 구조를 의미합니다. 입력이 없을 경우 ''yyyy-MM-dd''T''HH:mm:ss[.SSS][ZZ]''가 적용됩니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/>▪ locale:  은(는)  출력 언어입니다.<br/><br/>TIMESTAMP_VALIDATE( ''2011-01-04T10:00:00'' ) => 1<br/>TIMESTAMP_VALIDATE( ''2011-01-04 10:00:00'', ''yyyy-MM-dd HH:mm'' ) => 0<br/>TIMESTAMP_VALIDATE( ''2011-01-04 10:00:00'', ''yyyy-MM-dd HH:mm:ss'', ''Asia/Seoul'') => 1', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (116, 'PAGE-CALCULATION', 'TIME', 'TIME FIELD', 'TIME FUNCTION', 'DATETIME_EXTRACT', 1, 'Y', '대상 시간에서 time_unit 을 반환합니다. <br/><br/>DATETIME_EXTRACT( time_unit, datetime)<br/>DATETIME_EXTRACT( time_unit, datetime, timezone)<br/>▪ time_unit: 은(는) 결과의 시간 단위입니다. (  EPOCH, SECOND, MINUTE, HOUR, DAY, WEEK, WEEKOFWEEKYEAR, MONTH, YEAR, WEEKYEAR, DOW, DOY, QUARTER )  <br/>▪ datetime: 은(는)  대상이 되는 시간입니다.<br/>▪ timezone:  은(는) 시간대입니다.<br/><br/><br/>DATETIME_EXTRACT( ''SECOND'', ''2016-01-01 10:10:10'') => 10<br/>DATETIME_EXTRACT( ''DOW'', ''2016-01-01 10:10:10'') => 5<br/>DATETIME_EXTRACT( ''DOY'', ''2016-02-10 10:10:10'', ''Asia/Seoul'') => 41', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (117, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$PREV', 1, 'Y', '윈도우 프레임에서 이전의 값을 반환합니다. 시작의 경우 null을 반환합니다.<br/><br/>$PREV(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$PREV(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (118, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$NEXT', 1, 'Y', '윈도우 프레임에서 이후의 값을 반환합니다. 마지막의 경우 null을 반환합니다.<br/><br/>$NEXT(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$NEXT(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (119, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$LAST', 1, 'Y', '윈도우 프레임에서 마지막 값을 반환합니다.<br/><br/>$LAST(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$LAST(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (120, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$FIRST', 1, 'Y', '윈도우 프레임에서 처음 값을 반환합니다.<br/><br/>$FIRST(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$FIRST(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (121, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$NTH', 1, 'Y', '윈도우 프레임에서  n번째 값을 반환합니다.<br/><br/>$NTH(aggregation_expression, index, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ index: 은(는)  n번째를 의미하는 숫자입니다.( 1부터 시작)<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$NTH(sumof([Profit]), 3, {[Category]}) <br/>$NTH(sumof([Profit]), 1, {[Category]}) == $FIRST(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (122, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$LAG', 1, 'Y', '윈도우 프레임에서  n번째 이전의 값을 반환합니다. 값이 없는 경우 null을 반환합니다.<br/><br/>$LAG(aggregation_expression, index, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ index: 은(는) n번째를 의미하는 숫자입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$LAG(sumof([Profit]), 3, {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (123, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$LEAD', 1, 'Y', '윈도우 프레임에서  n번째 이후의 값을 반환합니다. 값이 없는 경우 null을 반환합니다.<br/><br/>$LEAD(aggregation_expression, index, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ index: 은(는) n번째를 의미하는 숫자입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$LEAD(sumof([Profit]), 3, {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (124, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$DELTA', 1, 'Y', '윈도우 프레임에서  현재 값에서 이전의 값을 뺀 차이를 반환합니다. 이전의 값이 없는 경우 0을 반환합니다.<br/><br/>$DELTA(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$DELTA(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (125, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$SUM', 1, 'Y', '윈도우 프레임에서 발생한 값들의 합을 반환합니다.<br/><br/>$SUM(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$SUM(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (126, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$MIN', 1, 'Y', '윈도우 프레임에서 발생한 값들 중 최소값을 반환합니다.<br/><br/>$MIN(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$MIN(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (127, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$MAX', 1, 'Y', '윈도우 프레임에서 발생한 값들 중 최대값을 반환합니다.<br/><br/>$MAX(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$MAX(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (128, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$ROW_NUM', 1, 'Y', '윈도우 프레임에서 누적된 데이타의 수를 반환합니다.<br/><br/>$ROW_NUM(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$ROW_NUM(sumof([Profit]), {[Category]}) => $DENSE_RANK( SUMOF([Sales]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (129, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$RANK', 1, 'Y', '윈도우 프레임에서 발생한 순위를 반환합니다.<br/><br/>$RANK(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$RANK(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (130, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$DENSE_RANK', 1, 'Y', '윈도우 프레임에서 발생한 중복을 무시한 순위를 반환합니다.<br/><br/>$DENSE_RANK(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$DENSE_RANK(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (131, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$MEAN', 1, 'Y', '윈도우 프레임에서 발생한 값들의 평균값을 반환합니다.<br/><br/>$MEAN(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$MEAN(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (132, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$VARIANCE', 1, 'Y', '윈도우 프레임에서 발생한 값들의 분산을 반환합니다.<br/><br/>$VARIANCE(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$VARIANCE(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (133, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$STDDEV', 1, 'Y', '윈도우 프레임에서 발생한 값들의 표준편차를 반환합니다.<br/><br/>$STDDEV(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$STDDEV(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (134, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$VARIANCEPOP', 1, 'Y', '윈도우 프레임에서 발생한 값들의 모분산을 반환합니다.<br/><br/>$VARIANCEPOP(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$VARIANCEPOP(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (135, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$STDDEVPOP', 1, 'Y', '윈도우 프레임에서 발생한 값들의 모표준편차를 반환합니다.<br/><br/>$STDDEVPOP(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$STDDEVPOP(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (136, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$PERCENTILE', 1, 'Y', '윈도우 프레임에서 발생한 값들에서 k번째 백분위수를 반환합니다.<br/><br/>$PERCENTILE(aggregation_expression, k, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ k: 은(는) 0에서 1까지의 백분위수 값입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$PERCENTILE(sumof([Profit]), 0.5, {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (138, 'PAGE-CALCULATION', 'WINDOW', 'WINDOW FIELD', 'WINDOW FUNCTION', '$SIZE', 1, 'Y', '윈도우 프레임의 크기를 반환합니다.<br/><br/>$SIZE(aggregation_expression, {partition_field_name})<br/>▪ aggregation_expression: 은(는) aggregation function을 포함한 수식입니다.<br/>▪ partition_field_name: 은(는) partition을 수행할 대상 필드 이름입니다. 리스트의 형태로 입력합니다.<br/><br/>$SIZE(sumof([Profit]), {[Category]})', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (141, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'MINOF', 1, 'Y', '입력된 값들중에서 가장 작은 값을 반환한다.<br/><br/>MINOF(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>MINOF( Profit+10 )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (142, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'MAXOF', 1, 'Y', '입력된 값들중에서 가장 큰 값을 반환합니다.<br/><br/>MAXOF(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>MAXOF( Profit+10 )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (143, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'AVGOF', 1, 'Y', '입력된 값들의 평균 값을 반환합니다.<br/><br/>AVGOF(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>AVGOF( Profit+10 )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (144, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'SUMOF', 1, 'Y', '입력된 값들의 합을 반환합니다.<br/><br/>SUMOF(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>SUMOF( Profit+10 )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (145, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'VARIANCEOF', 1, 'Y', '입력된 값들의 분산을 반환합니다.<br/><br/>VARIANCEOF(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>VARIANCEOF( Profit+10 )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (146, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'STDDEVOF', 1, 'Y', '입력된 값들의 표준편차를 반환합니다.<br/><br/>STDDEV(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>STDDEVOF( Profit+10 )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (147, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'COUNTOF', 1, 'Y', '대상의 줄(row)의 개수를 구합니다.<br/><br/>COUNTOF(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>COUNTOF( Profit+10 )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (148, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'COUNTD', 1, 'Y', '중복된 값을 제거하여 고유한 값들의 수를 반환합니다.<br/><br/>COUNTD(expression)<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>COUNTD([Sub-Category]) ', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (149, 'PAGE-CALCULATION', 'AGGREGATION', 'AGGREGATION FIELD', 'AGGREGATION FUNCTION', 'IFCOUNTD', 1, 'Y', '조건에 부합하는 고유한 값들의 수를 반환합니다.<br/><br/>IFCOUNTD(logical_expression, expression)<br/>▪ logical_expression: 은(는)  참 혹은 거짓을 의미하는 값 혹은 표현식입니다.<br/>▪ expression: 은(는)  값을 표현하는 수 혹은 수식입니다.<br/><br/>IFCOUNTD([Sales] > 1000,[Sub-Category] )', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (150, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', '+', 1, 'Y', '더하기를 수행합니다.<br/><br/>x+y<br/><br/>profit + 10', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (151, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', '-', 1, 'Y', '빼기를 수행합니다.<br/><br/>x-y<br/><br/>profit - 10', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (152, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', '*', 1, 'Y', '곱하기를 수행합니다.<br/><br/>x*y<br/><br/>profit * 2', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (153, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', '/', 1, 'Y', '나누기를 수행합니다.<br/><br/>x/y<br/><br/>profit / 2', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (154, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', '%', 1, 'Y', '나머지를 반환합니다.<br/><br/>x%y<br/><br/>profit % 2', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (155, 'PAGE-CALCULATION', 'MATH', 'MATH FIELD', 'MATH FUNCTION', '^', 1, 'Y', '지수 연산을 수행합니다.<br/><br/>x^y<br/><br/>profit ^ 2', 1.0, NOW(), 'INIT', NOW(), 'INIT');
INSERT INTO common_code(id, category_code, common_code, category_code_nm, common_code_nm, common_value, common_code_sno, common_use_fl, description, version, created_time, created_by, modified_time, modified_by) VALUES (156, 'PAGE-CALCULATION', 'ETC', 'ETC FIELD', 'ETC FUNCTION', 'IPV4_IN', 1, 'Y', 'IP가 범위에 포함되는지를 확인한다.<br/><br/>ipv4_in( target_ip, range_ip )<br/>ipv4_in( target_ip, start_ip, end_ip )<br/>▪ target_ip : 찾고자 하는 IP로 string입니다.<br/>▪ range_ip :  IP 범위를 표현하는  string입니다.<br/>▪ start_ip : IP의 시작을 표현하는 string입니다.<br/>▪ end_ip :  IP의 끝을 표현하는 string입니다.<br/><br/>ipv4_in(''192.168.3.4'', ''192.168.0.0'') => TRUE<br/>ipv4_in(''192.168.3.4'', ''192.168.0.0'', ''192.168.128.128'') => TRUE<br/>ipv4_in(''192.168.3.4'', ''192.168.32.0'', ''192.168.128.128'') => FALSE', 1.0, NOW(), 'INIT', NOW(), 'INIT');